// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module conv2d_kernel_conv2d_kernel_Pipeline_VITIS_LOOP_42_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_HBM0_AWVALID,
        m_axi_HBM0_AWREADY,
        m_axi_HBM0_AWADDR,
        m_axi_HBM0_AWID,
        m_axi_HBM0_AWLEN,
        m_axi_HBM0_AWSIZE,
        m_axi_HBM0_AWBURST,
        m_axi_HBM0_AWLOCK,
        m_axi_HBM0_AWCACHE,
        m_axi_HBM0_AWPROT,
        m_axi_HBM0_AWQOS,
        m_axi_HBM0_AWREGION,
        m_axi_HBM0_AWUSER,
        m_axi_HBM0_WVALID,
        m_axi_HBM0_WREADY,
        m_axi_HBM0_WDATA,
        m_axi_HBM0_WSTRB,
        m_axi_HBM0_WLAST,
        m_axi_HBM0_WID,
        m_axi_HBM0_WUSER,
        m_axi_HBM0_ARVALID,
        m_axi_HBM0_ARREADY,
        m_axi_HBM0_ARADDR,
        m_axi_HBM0_ARID,
        m_axi_HBM0_ARLEN,
        m_axi_HBM0_ARSIZE,
        m_axi_HBM0_ARBURST,
        m_axi_HBM0_ARLOCK,
        m_axi_HBM0_ARCACHE,
        m_axi_HBM0_ARPROT,
        m_axi_HBM0_ARQOS,
        m_axi_HBM0_ARREGION,
        m_axi_HBM0_ARUSER,
        m_axi_HBM0_RVALID,
        m_axi_HBM0_RREADY,
        m_axi_HBM0_RDATA,
        m_axi_HBM0_RLAST,
        m_axi_HBM0_RID,
        m_axi_HBM0_RFIFONUM,
        m_axi_HBM0_RUSER,
        m_axi_HBM0_RRESP,
        m_axi_HBM0_BVALID,
        m_axi_HBM0_BREADY,
        m_axi_HBM0_BRESP,
        m_axi_HBM0_BID,
        m_axi_HBM0_BUSER,
        sext_ln42
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_HBM0_AWVALID;
input   m_axi_HBM0_AWREADY;
output  [63:0] m_axi_HBM0_AWADDR;
output  [0:0] m_axi_HBM0_AWID;
output  [31:0] m_axi_HBM0_AWLEN;
output  [2:0] m_axi_HBM0_AWSIZE;
output  [1:0] m_axi_HBM0_AWBURST;
output  [1:0] m_axi_HBM0_AWLOCK;
output  [3:0] m_axi_HBM0_AWCACHE;
output  [2:0] m_axi_HBM0_AWPROT;
output  [3:0] m_axi_HBM0_AWQOS;
output  [3:0] m_axi_HBM0_AWREGION;
output  [0:0] m_axi_HBM0_AWUSER;
output   m_axi_HBM0_WVALID;
input   m_axi_HBM0_WREADY;
output  [63:0] m_axi_HBM0_WDATA;
output  [7:0] m_axi_HBM0_WSTRB;
output   m_axi_HBM0_WLAST;
output  [0:0] m_axi_HBM0_WID;
output  [0:0] m_axi_HBM0_WUSER;
output   m_axi_HBM0_ARVALID;
input   m_axi_HBM0_ARREADY;
output  [63:0] m_axi_HBM0_ARADDR;
output  [0:0] m_axi_HBM0_ARID;
output  [31:0] m_axi_HBM0_ARLEN;
output  [2:0] m_axi_HBM0_ARSIZE;
output  [1:0] m_axi_HBM0_ARBURST;
output  [1:0] m_axi_HBM0_ARLOCK;
output  [3:0] m_axi_HBM0_ARCACHE;
output  [2:0] m_axi_HBM0_ARPROT;
output  [3:0] m_axi_HBM0_ARQOS;
output  [3:0] m_axi_HBM0_ARREGION;
output  [0:0] m_axi_HBM0_ARUSER;
input   m_axi_HBM0_RVALID;
output   m_axi_HBM0_RREADY;
input  [63:0] m_axi_HBM0_RDATA;
input   m_axi_HBM0_RLAST;
input  [0:0] m_axi_HBM0_RID;
input  [8:0] m_axi_HBM0_RFIFONUM;
input  [0:0] m_axi_HBM0_RUSER;
input  [1:0] m_axi_HBM0_RRESP;
input   m_axi_HBM0_BVALID;
output   m_axi_HBM0_BREADY;
input  [1:0] m_axi_HBM0_BRESP;
input  [0:0] m_axi_HBM0_BID;
input  [0:0] m_axi_HBM0_BUSER;
input  [60:0] sext_ln42;

reg ap_done;
reg ap_idle;
reg m_axi_HBM0_RREADY;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    HBM0_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] trunc_ln42_reg_104;
wire   [0:0] trunc_ln42_fu_71_p1;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg   [6:0] i_fu_44;
wire   [6:0] add_ln42_fu_75_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 i_fu_44 = 7'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_44 <= 7'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_fu_44 <= add_ln42_fu_75_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln42_reg_104 <= trunc_ln42_fu_71_p1;
    end
end

always @ (*) begin
    if (((trunc_ln42_reg_104 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        HBM0_blk_n_R = m_axi_HBM0_RVALID;
    end else begin
        HBM0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln42_reg_104 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_HBM0_RREADY = 1'b1;
    end else begin
        m_axi_HBM0_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln42_fu_75_p2 = (i_fu_44 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((trunc_ln42_reg_104 == 1'd0) & (m_axi_HBM0_RVALID == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = 1'b0;

assign m_axi_HBM0_ARADDR = 64'd0;

assign m_axi_HBM0_ARBURST = 2'd0;

assign m_axi_HBM0_ARCACHE = 4'd0;

assign m_axi_HBM0_ARID = 1'd0;

assign m_axi_HBM0_ARLEN = 32'd0;

assign m_axi_HBM0_ARLOCK = 2'd0;

assign m_axi_HBM0_ARPROT = 3'd0;

assign m_axi_HBM0_ARQOS = 4'd0;

assign m_axi_HBM0_ARREGION = 4'd0;

assign m_axi_HBM0_ARSIZE = 3'd0;

assign m_axi_HBM0_ARUSER = 1'd0;

assign m_axi_HBM0_ARVALID = 1'b0;

assign m_axi_HBM0_AWADDR = 64'd0;

assign m_axi_HBM0_AWBURST = 2'd0;

assign m_axi_HBM0_AWCACHE = 4'd0;

assign m_axi_HBM0_AWID = 1'd0;

assign m_axi_HBM0_AWLEN = 32'd0;

assign m_axi_HBM0_AWLOCK = 2'd0;

assign m_axi_HBM0_AWPROT = 3'd0;

assign m_axi_HBM0_AWQOS = 4'd0;

assign m_axi_HBM0_AWREGION = 4'd0;

assign m_axi_HBM0_AWSIZE = 3'd0;

assign m_axi_HBM0_AWUSER = 1'd0;

assign m_axi_HBM0_AWVALID = 1'b0;

assign m_axi_HBM0_BREADY = 1'b0;

assign m_axi_HBM0_WDATA = 64'd0;

assign m_axi_HBM0_WID = 1'd0;

assign m_axi_HBM0_WLAST = 1'b0;

assign m_axi_HBM0_WSTRB = 8'd0;

assign m_axi_HBM0_WUSER = 1'd0;

assign m_axi_HBM0_WVALID = 1'b0;

assign trunc_ln42_fu_71_p1 = i_fu_44[0:0];

endmodule //conv2d_kernel_conv2d_kernel_Pipeline_VITIS_LOOP_42_1
