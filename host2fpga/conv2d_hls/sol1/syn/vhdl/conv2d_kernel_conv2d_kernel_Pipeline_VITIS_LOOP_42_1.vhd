-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2d_kernel_conv2d_kernel_Pipeline_VITIS_LOOP_42_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_HBM0_AWVALID : OUT STD_LOGIC;
    m_axi_HBM0_AWREADY : IN STD_LOGIC;
    m_axi_HBM0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_HBM0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_HBM0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_HBM0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HBM0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HBM0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HBM0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HBM0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HBM0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HBM0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HBM0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_HBM0_WVALID : OUT STD_LOGIC;
    m_axi_HBM0_WREADY : IN STD_LOGIC;
    m_axi_HBM0_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_HBM0_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_HBM0_WLAST : OUT STD_LOGIC;
    m_axi_HBM0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_HBM0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_HBM0_ARVALID : OUT STD_LOGIC;
    m_axi_HBM0_ARREADY : IN STD_LOGIC;
    m_axi_HBM0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_HBM0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_HBM0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_HBM0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HBM0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HBM0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HBM0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HBM0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_HBM0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HBM0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_HBM0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_HBM0_RVALID : IN STD_LOGIC;
    m_axi_HBM0_RREADY : OUT STD_LOGIC;
    m_axi_HBM0_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_HBM0_RLAST : IN STD_LOGIC;
    m_axi_HBM0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_HBM0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_HBM0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_HBM0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HBM0_BVALID : IN STD_LOGIC;
    m_axi_HBM0_BREADY : OUT STD_LOGIC;
    m_axi_HBM0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_HBM0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_HBM0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln42 : IN STD_LOGIC_VECTOR (60 downto 0) );
end;


architecture behav of conv2d_kernel_conv2d_kernel_Pipeline_VITIS_LOOP_42_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal HBM0_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal trunc_ln42_reg_104 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln42_fu_71_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal i_fu_44 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln42_fu_75_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_44 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i_fu_44 <= add_ln42_fu_75_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln42_reg_104 <= trunc_ln42_fu_71_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    HBM0_blk_n_R_assign_proc : process(m_axi_HBM0_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, trunc_ln42_reg_104)
    begin
        if (((trunc_ln42_reg_104 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            HBM0_blk_n_R <= m_axi_HBM0_RVALID;
        else 
            HBM0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    add_ln42_fu_75_p2 <= std_logic_vector(unsigned(i_fu_44) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state3_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state3_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter1));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(m_axi_HBM0_RVALID, trunc_ln42_reg_104)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((trunc_ln42_reg_104 = ap_const_lv1_0) and (m_axi_HBM0_RVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= ap_const_logic_0;
    m_axi_HBM0_ARADDR <= ap_const_lv64_0;
    m_axi_HBM0_ARBURST <= ap_const_lv2_0;
    m_axi_HBM0_ARCACHE <= ap_const_lv4_0;
    m_axi_HBM0_ARID <= ap_const_lv1_0;
    m_axi_HBM0_ARLEN <= ap_const_lv32_0;
    m_axi_HBM0_ARLOCK <= ap_const_lv2_0;
    m_axi_HBM0_ARPROT <= ap_const_lv3_0;
    m_axi_HBM0_ARQOS <= ap_const_lv4_0;
    m_axi_HBM0_ARREGION <= ap_const_lv4_0;
    m_axi_HBM0_ARSIZE <= ap_const_lv3_0;
    m_axi_HBM0_ARUSER <= ap_const_lv1_0;
    m_axi_HBM0_ARVALID <= ap_const_logic_0;
    m_axi_HBM0_AWADDR <= ap_const_lv64_0;
    m_axi_HBM0_AWBURST <= ap_const_lv2_0;
    m_axi_HBM0_AWCACHE <= ap_const_lv4_0;
    m_axi_HBM0_AWID <= ap_const_lv1_0;
    m_axi_HBM0_AWLEN <= ap_const_lv32_0;
    m_axi_HBM0_AWLOCK <= ap_const_lv2_0;
    m_axi_HBM0_AWPROT <= ap_const_lv3_0;
    m_axi_HBM0_AWQOS <= ap_const_lv4_0;
    m_axi_HBM0_AWREGION <= ap_const_lv4_0;
    m_axi_HBM0_AWSIZE <= ap_const_lv3_0;
    m_axi_HBM0_AWUSER <= ap_const_lv1_0;
    m_axi_HBM0_AWVALID <= ap_const_logic_0;
    m_axi_HBM0_BREADY <= ap_const_logic_0;

    m_axi_HBM0_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln42_reg_104, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln42_reg_104 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_HBM0_RREADY <= ap_const_logic_1;
        else 
            m_axi_HBM0_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_HBM0_WDATA <= ap_const_lv64_0;
    m_axi_HBM0_WID <= ap_const_lv1_0;
    m_axi_HBM0_WLAST <= ap_const_logic_0;
    m_axi_HBM0_WSTRB <= ap_const_lv8_0;
    m_axi_HBM0_WUSER <= ap_const_lv1_0;
    m_axi_HBM0_WVALID <= ap_const_logic_0;
    trunc_ln42_fu_71_p1 <= i_fu_44(1 - 1 downto 0);
end behav;
